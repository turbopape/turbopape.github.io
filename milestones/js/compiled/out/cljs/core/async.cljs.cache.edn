{:rename-macros {}, :renames {}, :use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{reduce take map into partition merge partition-by}, :name cljs.core.async, :imports nil, :requires {cljs.core.async.impl.channels cljs.core.async.impl.channels, cljs.core.async.impl.dispatch cljs.core.async.impl.dispatch, helpers cljs.core.async.impl.ioc-helpers, impl cljs.core.async.impl.protocols, channels cljs.core.async.impl.channels, cljs.core.async.impl.buffers cljs.core.async.impl.buffers, cljs.core.async.impl.protocols cljs.core.async.impl.protocols, timers cljs.core.async.impl.timers, dispatch cljs.core.async.impl.dispatch, cljs.core.async.impl.ioc-helpers cljs.core.async.impl.ioc-helpers, buffers cljs.core.async.impl.buffers, cljs.core.async.impl.timers cljs.core.async.impl.timers}, :uses nil, :defs {Pub {:meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 589, :column 14, :end-line 589, :end-column 17, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {sub* [[p v ch close?]], unsub* [[p v ch]], unsub-all* [[p] [p v]]}}}, :protocol-symbol true, :name cljs.core.async/Pub, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 17, :column 1, :line 589, :protocol-info {:methods {sub* [[p v ch close?]], unsub* [[p v ch]], unsub-all* [[p] [p v]]}}, :info nil, :end-line 589, :impls #{cljs.core.async/t_cljs$core$async49314}, :doc nil, :jsdoc ("@interface")}, reduce {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 359, :column 7, :end-line 359, :end-column 13, :arglists (quote ([f init ch])), :doc "f should be a function of 2 arguments. Returns a channel containing\n  the single result of applying f to init and the first item from the\n  channel, then applying f to that result and the 2nd item, etc. If\n  the channel closes without yielding items, returns init and f is not\n  called. ch must close before reduce produces a result."}, :name cljs.core.async/reduce, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 13, :method-params ([f init ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 359, :end-line 359, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f init ch])), :doc "f should be a function of 2 arguments. Returns a channel containing\n  the single result of applying f to init and the first item from the\n  channel, then applying f to that result and the 2nd item, etc. If\n  the channel closes without yielding items, returns init and f is not\n  called. ch must close before reduce produces a result."}, remove> {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 809, :column 7, :end-line 809, :end-column 14, :arglists (quote ([p ch])), :doc "Deprecated - this function will be removed. Use transducer instead"}, :name cljs.core.async/remove>, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 14, :method-params ([p ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 809, :end-line 809, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p ch])), :doc "Deprecated - this function will be removed. Use transducer instead"}, timeout {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 78, :column 7, :end-line 78, :end-column 14, :arglists (quote ([msecs])), :doc "Returns a channel that will close after msecs"}, :name cljs.core.async/timeout, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 14, :method-params ([msecs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msecs])), :doc "Returns a channel that will close after msecs"}, unsub* {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 591, :column 4, :end-line 591, :end-column 10, :protocol cljs.core.async/Pub, :doc nil, :arglists (quote ([p v ch]))}, :protocol cljs.core.async/Pub, :name cljs.core.async/unsub*, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 10, :method-params ([p v ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 589, :end-line 591, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p v ch])), :doc nil}, admix* {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 469, :column 4, :end-line 469, :end-column 10, :protocol cljs.core.async/Mix, :doc nil, :arglists (quote ([m ch]))}, :protocol cljs.core.async/Mix, :name cljs.core.async/admix*, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 10, :method-params ([m ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 468, :end-line 469, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m ch])), :doc nil}, unmix* {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 470, :column 4, :end-line 470, :end-column 10, :protocol cljs.core.async/Mix, :doc nil, :arglists (quote ([m ch]))}, :protocol cljs.core.async/Mix, :name cljs.core.async/unmix*, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 10, :method-params ([m ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 468, :end-line 470, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m ch])), :doc nil}, t_cljs$core$async49739 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async49739, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 795, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$core$async47606 {:num-fields 2, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async47606, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :type true, :anonymous true, :column 5, :line 155, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$core$async49736 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([f ch meta49737])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async49736, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :method-params ([f ch meta49737]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 781, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f ch meta49737])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, mapcat* {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 833, :column 8, :end-line 833, :end-column 15, :private true, :arglists (quote ([f in out]))}, :private true, :name cljs.core.async/mapcat*, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 15, :method-params ([f in out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 833, :end-line 833, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f in out]))}, ->t_cljs$core$async47612 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([flag cb meta47613])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async47612, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :method-params ([flag cb meta47613]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 164, :max-fixed-arity 3, :fn-var true, :arglists (quote ([flag cb meta47613])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, mix {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 486, :column 7, :end-line 486, :end-column 10, :arglists (quote ([out])), :doc "Creates and returns a mix of one or more input channels which will\n  be put on the supplied out channel. Input sources can be added to\n  the mix with 'admix', and removed with 'unmix'. A mix supports\n  soloing, muting and pausing multiple inputs atomically using\n  'toggle', and can solo using either muting or pausing as determined\n  by 'solo-mode'.\n\n  Each channel can have zero or more boolean modes set via 'toggle':\n\n  :solo - when true, only this (ond other soloed) channel(s) will appear\n          in the mix output channel. :mute and :pause states of soloed\n          channels are ignored. If solo-mode is :mute, non-soloed\n          channels are muted, if :pause, non-soloed channels are\n          paused.\n\n  :mute - muted channels will have their contents consumed but not included in the mix\n  :pause - paused channels will not have their contents consumed (and thus also not included in the mix)\n"}, :name cljs.core.async/mix, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 10, :method-params ([out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 486, :end-line 486, :max-fixed-arity 1, :fn-var true, :arglists (quote ([out])), :doc "Creates and returns a mix of one or more input channels which will\n  be put on the supplied out channel. Input sources can be added to\n  the mix with 'admix', and removed with 'unmix'. A mix supports\n  soloing, muting and pausing multiple inputs atomically using\n  'toggle', and can solo using either muting or pausing as determined\n  by 'solo-mode'.\n\n  Each channel can have zero or more boolean modes set via 'toggle':\n\n  :solo - when true, only this (ond other soloed) channel(s) will appear\n          in the mix output channel. :mute and :pause states of soloed\n          channels are ignored. If solo-mode is :mute, non-soloed\n          channels are muted, if :pause, non-soloed channels are\n          paused.\n\n  :mute - muted channels will have their contents consumed but not included in the mix\n  :pause - paused channels will not have their contents consumed (and thus also not included in the mix)\n"}, pub {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 594, :column 7, :end-line 594, :end-column 10, :arglists (quote ([ch topic-fn] [ch topic-fn buf-fn])), :doc "Creates and returns a pub(lication) of the supplied channel,\n  partitioned into topics by the topic-fn. topic-fn will be applied to\n  each value on the channel and the result will determine the 'topic'\n  on which that value will be put. Channels can be subscribed to\n  receive copies of topics using 'sub', and unsubscribed using\n  'unsub'. Each topic will be handled by an internal mult on a\n  dedicated channel. By default these internal channels are\n  unbuffered, but a buf-fn can be supplied which, given a topic,\n  creates a buffer with desired properties.\n\n  Each item is distributed to all subs in parallel and synchronously,\n  i.e. each sub must accept before the next item is distributed. Use\n  buffering/windowing to prevent slow subs from holding up the pub.\n\n  Items received when there are no matching subs get dropped.\n\n  Note that if buf-fns are used then each topic is handled\n  asynchronously, i.e. if a channel is subscribed to more than one\n  topic it should not expect them to be interleaved identically with\n  the source.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([ch topic-fn] [ch topic-fn buf-fn]), :arglists ([ch topic-fn] [ch topic-fn buf-fn]), :arglists-meta (nil nil)}}, :name cljs.core.async/pub, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([ch topic-fn] [ch topic-fn buf-fn]), :arglists ([ch topic-fn] [ch topic-fn buf-fn]), :arglists-meta (nil nil)}, :method-params ([ch topic-fn] [ch topic-fn buf-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 594, :end-line 594, :max-fixed-arity 3, :fn-var true, :arglists ([ch topic-fn] [ch topic-fn buf-fn]), :doc "Creates and returns a pub(lication) of the supplied channel,\n  partitioned into topics by the topic-fn. topic-fn will be applied to\n  each value on the channel and the result will determine the 'topic'\n  on which that value will be put. Channels can be subscribed to\n  receive copies of topics using 'sub', and unsubscribed using\n  'unsub'. Each topic will be handled by an internal mult on a\n  dedicated channel. By default these internal channels are\n  unbuffered, but a buf-fn can be supplied which, given a topic,\n  creates a buffer with desired properties.\n\n  Each item is distributed to all subs in parallel and synchronously,\n  i.e. each sub must accept before the next item is distributed. Use\n  buffering/windowing to prevent slow subs from holding up the pub.\n\n  Items received when there are no matching subs get dropped.\n\n  Note that if buf-fns are used then each topic is handled\n  asynchronously, i.e. if a channel is subscribed to more than one\n  topic it should not expect them to be interleaved identically with\n  the source."}, take {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 731, :column 7, :end-line 731, :end-column 11, :arglists (quote ([n ch] [n ch buf-or-n])), :doc "Returns a channel that will return, at most, n items from ch. After n items\n   have been returned, or ch has been closed, the return chanel will close.\n\n  The output channel is unbuffered by default, unless buf-or-n is given.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n ch] [n ch buf-or-n]), :arglists ([n ch] [n ch buf-or-n]), :arglists-meta (nil nil)}}, :name cljs.core.async/take, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n ch] [n ch buf-or-n]), :arglists ([n ch] [n ch buf-or-n]), :arglists-meta (nil nil)}, :method-params ([n ch] [n ch buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 731, :end-line 731, :max-fixed-arity 3, :fn-var true, :arglists ([n ch] [n ch buf-or-n]), :doc "Returns a channel that will return, at most, n items from ch. After n items\n   have been returned, or ch has been closed, the return chanel will close.\n\n  The output channel is unbuffered by default, unless buf-or-n is given."}, unsub-all* {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 592, :column 4, :end-line 592, :end-column 14, :protocol cljs.core.async/Pub, :doc nil, :arglists (quote ([p] [p v])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([p] [p v]), :arglists ([p] [p v]), :arglists-meta (nil nil)}}, :protocol cljs.core.async/Pub, :name cljs.core.async/unsub-all*, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([p] [p v]), :arglists ([p] [p v]), :arglists-meta (nil nil)}, :method-params ([p] [p v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 589, :end-line 592, :max-fixed-arity 2, :fn-var true, :arglists ([p] [p v]), :doc nil}, <! {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 83, :column 7, :end-line 83, :end-column 9, :arglists (quote ([port])), :doc "takes a val from port. Must be called inside a (go ...) block. Will\n  return nil if closed. Will park if nothing is available.\n  Returns true unless port is already closed"}, :name cljs.core.async/<!, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 9, :method-params ([port]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 1, :fn-var true, :arglists (quote ([port])), :doc "takes a val from port. Must be called inside a (go ...) block. Will\n  return nil if closed. Will park if nothing is available.\n  Returns true unless port is already closed"}, t_cljs$core$async49314 {:num-fields 6, :protocols #{cljs.core.async/Pub cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async49314, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :type true, :anonymous true, :column 14, :line 623, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, map {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 670, :column 7, :end-line 670, :end-column 10, :arglists (quote ([f chs] [f chs buf-or-n])), :doc "Takes a function and a collection of source channels, and returns a\n  channel which contains the values produced by applying f to the set\n  of first items taken from each source channel, followed by applying\n  f to the set of second items from each channel, until any one of the\n  channels is closed, at which point the output channel will be\n  closed. The returned channel will be unbuffered by default, or a\n  buf-or-n can be supplied", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f chs] [f chs buf-or-n]), :arglists ([f chs] [f chs buf-or-n]), :arglists-meta (nil nil)}}, :name cljs.core.async/map, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f chs] [f chs buf-or-n]), :arglists ([f chs] [f chs buf-or-n]), :arglists-meta (nil nil)}, :method-params ([f chs] [f chs buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 670, :end-line 670, :max-fixed-arity 3, :fn-var true, :arglists ([f chs] [f chs buf-or-n]), :doc "Takes a function and a collection of source channels, and returns a\n  channel which contains the values produced by applying f to the set\n  of first items taken from each source channel, followed by applying\n  f to the set of second items from each channel, until any one of the\n  channels is closed, at which point the output channel will be\n  closed. The returned channel will be unbuffered by default, or a\n  buf-or-n can be supplied"}, Mux {:meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 400, :column 14, :end-line 400, :end-column 17, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {muxch* [[_]]}}}, :protocol-symbol true, :name cljs.core.async/Mux, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 17, :column 1, :line 400, :protocol-info {:methods {muxch* [[_]]}}, :info nil, :end-line 400, :impls #{cljs.core.async/t_cljs$core$async49087 cljs.core.async/t_cljs$core$async48615 cljs.core.async/t_cljs$core$async48390 cljs.core.async/t_cljs$core$async49314 cljs.core.async/t_cljs$core$async48920}, :doc nil, :jsdoc ("@interface")}, ->t_cljs$core$async47606 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([flag meta47607])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async47606, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :method-params ([flag meta47607]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 155, :max-fixed-arity 2, :fn-var true, :arglists (quote ([flag meta47607])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, mapcat> {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 851, :column 7, :end-line 851, :end-column 14, :arglists (quote ([f out] [f out buf-or-n])), :doc "Deprecated - this function will be removed. Use transducer instead", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f out] [f out buf-or-n]), :arglists ([f out] [f out buf-or-n]), :arglists-meta (nil nil)}}, :name cljs.core.async/mapcat>, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f out] [f out buf-or-n]), :arglists ([f out] [f out buf-or-n]), :arglists-meta (nil nil)}, :method-params ([f out] [f out buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 851, :end-line 851, :max-fixed-arity 3, :fn-var true, :arglists ([f out] [f out buf-or-n]), :doc "Deprecated - this function will be removed. Use transducer instead"}, fhnop {:name cljs.core.async/fhnop, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :line 106, :column 1, :end-line 106, :end-column 21, :private true, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 106, :column 16, :end-line 106, :end-column 21, :private true}}, ->t_cljs$core$async47564 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([f blockable meta47565])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async47564, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :method-params ([f blockable meta47565]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 4, :factory :positional, :line 15, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f blockable meta47565])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, buffer {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 21, :column 7, :end-line 21, :end-column 13, :arglists (quote ([n])), :doc "Returns a fixed buffer of size n. When full, puts will block/park."}, :name cljs.core.async/buffer, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 13, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns a fixed buffer of size n. When full, puts will block/park."}, close! {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 134, :column 7, :end-line 134, :end-column 13, :arglists (quote ([port]))}, :name cljs.core.async/close!, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 13, :method-params ([port]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 134, :end-line 134, :max-fixed-arity 1, :fn-var true, :arglists (quote ([port]))}, t_cljs$core$async48615 {:num-fields 3, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async48615, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :type true, :anonymous true, :column 11, :line 422, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$core$async49736 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async49736, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 781, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$core$async47609 {:num-fields 2, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async47609, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :type true, :anonymous true, :column 5, :line 155, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$core$async49742 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async49742, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 795, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, offer! {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 224, :column 7, :end-line 224, :end-column 13, :arglists (quote ([port val])), :doc "Puts a val into port if it's possible to do so immediately.\n  nil values are not allowed. Never blocks. Returns true if offer succeeds."}, :name cljs.core.async/offer!, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 13, :method-params ([port val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 224, :end-line 224, :max-fixed-arity 2, :fn-var true, :arglists (quote ([port val])), :doc "Puts a val into port if it's possible to do so immediately.\n  nil values are not allowed. Never blocks. Returns true if offer succeeds."}, ->t_cljs$core$async49742 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([p ch meta49743])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async49742, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :method-params ([p ch meta49743]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 795, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p ch meta49743])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, chan {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 45, :column 7, :end-line 45, :end-column 11, :arglists (quote ([] [buf-or-n] [buf-or-n xform] [buf-or-n xform ex-handler])), :doc "Creates a channel with an optional buffer, an optional transducer (like (map f),\n  (filter p) etc or a composition thereof), and an optional exception handler.\n  If buf-or-n is a number, will create and use a fixed buffer of that size. If a\n  transducer is supplied a buffer must be specified. ex-handler must be a\n  fn of one argument - if an exception occurs during transformation it will be called\n  with the thrown value as an argument, and any non-nil return value will be placed\n  in the channel.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([] [buf-or-n] [buf-or-n xform] [buf-or-n xform ex-handler]), :arglists ([] [buf-or-n] [buf-or-n xform] [buf-or-n xform ex-handler]), :arglists-meta (nil nil nil nil)}}, :name cljs.core.async/chan, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([] [buf-or-n] [buf-or-n xform] [buf-or-n xform ex-handler]), :arglists ([] [buf-or-n] [buf-or-n xform] [buf-or-n xform ex-handler]), :arglists-meta (nil nil nil nil)}, :method-params ([] [buf-or-n] [buf-or-n xform] [buf-or-n xform ex-handler]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 3, :fn-var true, :arglists ([] [buf-or-n] [buf-or-n xform] [buf-or-n xform ex-handler]), :doc "Creates a channel with an optional buffer, an optional transducer (like (map f),\n  (filter p) etc or a composition thereof), and an optional exception handler.\n  If buf-or-n is a number, will create and use a fixed buffer of that size. If a\n  transducer is supplied a buffer must be specified. ex-handler must be a\n  fn of one argument - if an exception occurs during transformation it will be called\n  with the thrown value as an argument, and any non-nil return value will be placed\n  in the channel."}, solo-mode* {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 473, :column 4, :end-line 473, :end-column 14, :protocol cljs.core.async/Mix, :doc nil, :arglists (quote ([m mode]))}, :protocol cljs.core.async/Mix, :name cljs.core.async/solo-mode*, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 14, :method-params ([m mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 468, :end-line 473, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m mode])), :doc nil}, tap {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 451, :column 7, :end-line 451, :end-column 10, :arglists (quote ([mult ch] [mult ch close?])), :doc "Copies the mult source onto the supplied channel.\n\n  By default the channel will be closed when the source closes,\n  but can be determined by the close? parameter.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([mult ch] [mult ch close?]), :arglists ([mult ch] [mult ch close?]), :arglists-meta (nil nil)}}, :name cljs.core.async/tap, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([mult ch] [mult ch close?]), :arglists ([mult ch] [mult ch close?]), :arglists-meta (nil nil)}, :method-params ([mult ch] [mult ch close?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 451, :end-line 451, :max-fixed-arity 3, :fn-var true, :arglists ([mult ch] [mult ch close?]), :doc "Copies the mult source onto the supplied channel.\n\n  By default the channel will be closed when the source closes,\n  but can be determined by the close? parameter."}, admix {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 556, :column 7, :end-line 556, :end-column 12, :arglists (quote ([mix ch])), :doc "Adds ch as an input to the mix"}, :name cljs.core.async/admix, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 12, :method-params ([mix ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 556, :end-line 556, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mix ch])), :doc "Adds ch as an input to the mix"}, promise-chan {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 67, :column 7, :end-line 67, :end-column 19, :arglists (quote ([] [xform] [xform ex-handler])), :doc "Creates a promise channel with an optional transducer, and an optional\n  exception-handler. A promise channel can take exactly one value that consumers\n  will receive. Once full, puts complete but val is dropped (no transfer).\n  Consumers will block until either a value is placed in the channel or the\n  channel is closed. See chan for the semantics of xform and ex-handler.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([] [xform] [xform ex-handler]), :arglists ([] [xform] [xform ex-handler]), :arglists-meta (nil nil nil)}}, :name cljs.core.async/promise-chan, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([] [xform] [xform ex-handler]), :arglists ([] [xform] [xform ex-handler]), :arglists-meta (nil nil nil)}, :method-params ([] [xform] [xform ex-handler]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 2, :fn-var true, :arglists ([] [xform] [xform ex-handler]), :doc "Creates a promise channel with an optional transducer, and an optional\n  exception-handler. A promise channel can take exactly one value that consumers\n  will receive. Once full, puts complete but val is dropped (no transfer).\n  Consumers will block until either a value is placed in the channel or the\n  channel is closed. See chan for the semantics of xform and ex-handler."}, unique {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 859, :column 7, :end-line 859, :end-column 13, :arglists (quote ([ch] [ch buf-or-n])), :doc "Deprecated - this function will be removed. Use transducer instead", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ch] [ch buf-or-n]), :arglists ([ch] [ch buf-or-n]), :arglists-meta (nil nil)}}, :name cljs.core.async/unique, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ch] [ch buf-or-n]), :arglists ([ch] [ch buf-or-n]), :arglists-meta (nil nil)}, :method-params ([ch] [ch buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 859, :end-line 859, :max-fixed-arity 2, :fn-var true, :arglists ([ch] [ch buf-or-n]), :doc "Deprecated - this function will be removed. Use transducer instead"}, muxch* {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 401, :column 4, :end-line 401, :end-column 10, :protocol cljs.core.async/Mux, :doc nil, :arglists (quote ([_]))}, :protocol cljs.core.async/Mux, :name cljs.core.async/muxch*, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 10, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 400, :end-line 401, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc nil}, solo-mode {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 583, :column 7, :end-line 583, :end-column 16, :arglists (quote ([mix mode])), :doc "Sets the solo mode of the mix. mode must be one of :mute or :pause"}, :name cljs.core.async/solo-mode, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 16, :method-params ([mix mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 583, :end-line 583, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mix mode])), :doc "Sets the solo mode of the mix. mode must be one of :mute or :pause"}, onto-chan {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 375, :column 7, :end-line 375, :end-column 16, :arglists (quote ([ch coll] [ch coll close?])), :doc "Puts the contents of coll into the supplied channel.\n\n  By default the channel will be closed after the items are copied,\n  but can be determined by the close? parameter.\n\n  Returns a channel which will close after the items are copied.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([ch coll] [ch coll close?]), :arglists ([ch coll] [ch coll close?]), :arglists-meta (nil nil)}}, :name cljs.core.async/onto-chan, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([ch coll] [ch coll close?]), :arglists ([ch coll] [ch coll close?]), :arglists-meta (nil nil)}, :method-params ([ch coll] [ch coll close?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 375, :end-line 375, :max-fixed-arity 3, :fn-var true, :arglists ([ch coll] [ch coll close?]), :doc "Puts the contents of coll into the supplied channel.\n\n  By default the channel will be closed after the items are copied,\n  but can be determined by the close? parameter.\n\n  Returns a channel which will close after the items are copied."}, to-chan {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 391, :column 7, :end-line 391, :end-column 14, :arglists (quote ([coll])), :doc "Creates and returns a channel which contains the contents of coll,\n  closing when exhausted."}, :name cljs.core.async/to-chan, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 14, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 391, :end-line 391, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Creates and returns a channel which contains the contents of coll,\n  closing when exhausted."}, dropping-buffer {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 26, :column 7, :end-line 26, :end-column 22, :arglists (quote ([n])), :doc "Returns a buffer of size n. When full, puts will complete but\n  val will be dropped (no transfer)."}, :name cljs.core.async/dropping-buffer, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 22, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns a buffer of size n. When full, puts will complete but\n  val will be dropped (no transfer)."}, untap-all {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 464, :column 7, :end-line 464, :end-column 16, :arglists (quote ([mult])), :doc "Disconnects all target channels from a mult"}, :name cljs.core.async/untap-all, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 16, :method-params ([mult]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 464, :end-line 464, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mult])), :doc "Disconnects all target channels from a mult"}, into {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 724, :column 7, :end-line 724, :end-column 11, :arglists (quote ([coll ch])), :doc "Returns a channel containing the single (collection) result of the\n  items taken from the channel conjoined to the supplied\n  collection. ch must close before into produces a result."}, :name cljs.core.async/into, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 11, :method-params ([coll ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 724, :end-line 724, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll ch])), :doc "Returns a channel containing the single (collection) result of the\n  items taken from the channel conjoined to the supplied\n  collection. ch must close before into produces a result."}, t_cljs$core$async47615 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async47615, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 164, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$core$async48615 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([ch cs meta48616])), :file nil}, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async48615, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :method-params ([ch cs meta48616]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 11, :factory :positional, :line 422, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ch cs meta48616])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$core$async48920 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([out cs solo-modes attrs solo-mode change changed pick calc-state meta48921])), :file nil}, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async48920, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :method-params ([out cs solo-modes attrs solo-mode change changed pick calc-state meta48921]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 11, :factory :positional, :line 531, :max-fixed-arity 10, :fn-var true, :arglists (quote ([out cs solo-modes attrs solo-mode change changed pick calc-state meta48921])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$core$async48390 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([ch cs meta48391])), :file nil}, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async48390, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :method-params ([ch cs meta48391]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 11, :factory :positional, :line 422, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ch cs meta48391])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, pipeline {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/core/async.cljs", :line 321, :column 7, :end-line 321, :end-column 15, :arglists (quote ([n to xf from] [n to xf from close?] [n to xf from close? ex-handler])), :doc "Takes elements from the from channel and supplies them to the to\n  channel, subject to the transducer xf, with parallelism n. Because\n  it is parallel, the transducer will be applied independently to each\n  element, not across elements, and may produce zero or more outputs\n  per input.  Outputs will be returned in order relative to the\n  inputs. By default, the to channel will be closed when the from\n  channel closes, but can be determined by the close?  parameter. Will\n  stop consuming the from channel if the to channel closes.\n\n  Note this is supplied for API compatibility with the Clojure version.\n  Values of N > 1 will not result in actual concurrency in a\n  single-threaded runtime.", :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([n to xf from] [n to xf from close?] [n to xf from close? ex-handler]), :arglists ([n to xf from] [n to xf from close?] [n to xf from close? ex-handler]), :arglists-meta (nil nil nil)}}, :name cljs.core.async/pipeline, :variadic false, :file "resources/public/js/compiled/out/cljs/core/async.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([n to xf from] [n to xf from close?] [n to xf from close? ex-handler]), :arglists ([n to xf from] [n to xf from close?] [n to xf from close? ex-handler]), :arglists-meta (nil nil nil)}, :method-params ([n to xf from] [n to xf from close?] [n to xf from close? ex-handler]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 321, :end-line 321, :max-fixed-arity 6, :fn-var true, :arglists ([n to xf from] [n to xf from close?] [n to xf from close? ex-handler]), :doc "Takes elements from the from channel and supplies them to the to\n  channel, subject to the transducer xf, with parallelism n. Because\n  it is parallel, the transducer will be applied independently to each\n  element, not across elements, and may produce zero or more outputs\n  per input.  Outputs will be returned in order relative to the\n  inputs. By default, the to channel will be closed when the from\n  channel closes, but can be determined by the close?  parameter. Will\n  stop consuming the from channel if the to channel closes.\n\n  Note this is supplied for API compatibility with the Clojure version.\n  Values of N > 1 will not result in actual concurrency in a\n  single-threaded runtime."}, ...}, :require-macros {ioc cljs.core.async.impl.ioc-macros, cljs.core.async.impl.ioc-macros cljs.core.async.impl.ioc-macros, cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:async change p meta49722 :mutes blockable :solo :cljs.core.async/nothing meta49315 :else :default cb buf-fn meta47616 meta49743 solo-mode :compute mults fn1 :recur meta48921 meta49737 meta47613 meta47565 _ pick flag ensure-mult meta49728 cs meta49740 :priority :solos meta48616 meta47607 meta49725 cljs.core.async/t_cljs$core$async49721 meta48391 ch cljs.core.async/t_cljs$core$async49727 calc-state :pause topic-fn meta47610 :tag out changed solo-modes meta49731 meta49088 ...}, :order [f blockable meta47565 flag meta47607 meta47610 cb meta47613 meta47616 :priority :default :recur :else :async :compute ch cs meta48391 meta48616 :pause :mute :solo :solos :mutes :reads out solo-modes attrs solo-mode change changed pick calc-state meta48921 meta49088 topic-fn buf-fn mults ensure-mult meta49315 meta49722 _ :tag cljs.core.async/t_cljs$core$async49721 fn1 meta49725 meta49728 cljs.core.async/t_cljs$core$async49727 meta49731 meta49734 ...]}, :doc nil}