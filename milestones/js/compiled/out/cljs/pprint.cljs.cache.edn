{:rename-macros {}, :renames {}, :use-macros {deftype cljs.pprint, print-length-loop cljs.pprint, defdirectives cljs.pprint, getf cljs.pprint, pprint-logical-block cljs.pprint, formatter-out cljs.pprint, with-pretty-writer cljs.pprint, setf cljs.pprint}, :excludes #{pr float? deftype prn println print}, :name cljs.pprint, :imports {StringBuffer goog.string.StringBuffer}, :requires {cljs.core cljs.core, string clojure.string, clojure.string clojure.string, gstring goog.string, goog.string goog.string, StringBuffer goog.string.StringBuffer}, :uses {IWriter cljs.core, IDeref cljs.core}, :defs {indent-t {:num-fields 6, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.pprint/indent-t, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 18, :type true, :column 10, :internal-ctor true, :line 259, :record true, :end-line 259, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, write-token-string {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 399, :column 8, :end-line 399, :end-column 26, :private true, :arglists (quote ([this tokens]))}, :private true, :name cljs.pprint/write-token-string, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 26, :method-params ([this tokens]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 399, :end-line 399, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this tokens]))}, process-nesting {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2657, :column 8, :end-line 2657, :end-column 23, :private true, :arglists (quote ([format])), :doc "Take a linearly compiled format and process the bracket directives to give it\n   the appropriate tree structure"}, :private true, :name cljs.pprint/process-nesting, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 23, :method-params ([format]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2657, :end-line 2657, :max-fixed-arity 1, :fn-var true, :arglists (quote ([format])), :doc "Take a linearly compiled format and process the bracket directives to give it\n   the appropriate tree structure"}, init-cap-writer {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2007, :column 8, :end-line 2007, :end-column 23, :private true, :arglists (quote ([writer])), :doc "Returns a proxy that wraps writer, capitalizing the first word"}, :private true, :name cljs.pprint/init-cap-writer, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 23, :method-params ([writer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2007, :end-line 2007, :max-fixed-arity 1, :fn-var true, :arglists (quote ([writer])), :doc "Returns a proxy that wraps writer, capitalizing the first word"}, check-enumerated-arg {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 833, :column 8, :end-line 833, :end-column 28, :private true, :arglists (quote ([arg choices]))}, :private true, :name cljs.pprint/check-enumerated-arg, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 28, :method-params ([arg choices]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 833, :end-line 833, :max-fixed-arity 2, :fn-var true, :arglists (quote ([arg choices]))}, brackets {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2923, :column 8, :end-line 2923, :end-column 16, :private true, :arglists (quote ([form])), :doc "Figure out which kind of brackets to use"}, :private true, :name cljs.pprint/brackets, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 16, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2923, :end-line 2923, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form])), :doc "Figure out which kind of brackets to use"}, get-section {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 358, :column 8, :end-line 358, :end-column 19, :private true, :arglists (quote ([buffer]))}, :private true, :name cljs.pprint/get-section, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 19, :method-params ([buffer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 358, :end-line 358, :max-fixed-arity 1, :fn-var true, :arglists (quote ([buffer]))}, readable-character {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1359, :column 8, :end-line 1359, :end-column 26, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/readable-character, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 26, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1359, :end-line 1359, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, linear-nl? {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 324, :column 8, :end-line 324, :end-column 18, :private true, :arglists (quote ([this lb section]))}, :private true, :name cljs.pprint/linear-nl?, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 18, :method-params ([this lb section]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 324, :end-line 324, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this lb section]))}, base-str {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1087, :column 8, :end-line 1087, :end-column 16, :private true, :arglists (quote ([base val])), :doc "Return val as a string in the given base"}, :private true, :name cljs.pprint/base-str, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 16, :method-params ([base val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1087, :end-line 1087, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base val])), :doc "Return val as a string in the given base"}, buffer-length {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 243, :column 8, :end-line 243, :end-column 21, :private true, :arglists (quote ([l]))}, :private true, :name cljs.pprint/buffer-length, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :method-params ([l]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 243, :end-line 243, :max-fixed-arity 1, :fn-var true, :arglists (quote ([l]))}, integral? {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1065, :column 8, :end-line 1065, :end-column 17, :private true, :arglists (quote ([x])), :doc "returns true if a number is actually an integer (that is, has no fractional part)"}, :private true, :name cljs.pprint/integral?, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1065, :end-line 1065, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "returns true if a number is actually an integer (that is, has no fractional part)"}, *print-circle* {:meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 649, :column 1, :end-line 649, :end-column 15, :private true, :doc "Mark circular structures (N.B. This is not yet used)", :dynamic true}, :private true, :name cljs.pprint/*print-circle*, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 15, :column 1, :dynamic true, :line 646, :end-line 649, :doc "Mark circular structures (N.B. This is not yet used)"}, param-pattern {:name cljs.pprint/param-pattern, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 2446, :column 1, :end-line 2447, :end-column 19, :private true, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2447, :column 6, :end-line 2447, :end-column 19, :private true}}, boolean-conditional {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1701, :column 8, :end-line 1701, :end-column 27, :private true, :arglists (quote ([params arg-navigator offsets]))}, :private true, :name cljs.pprint/boolean-conditional, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 27, :method-params ([params arg-navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1701, :end-line 1701, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params arg-navigator offsets]))}, add-english-scales {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1196, :column 8, :end-line 1196, :end-column 26, :private true, :arglists (quote ([parts offset])), :doc "Take a sequence of parts, add scale numbers (e.g., million) and combine into a string\n  offset is a factor of 10^3 to multiply by"}, :private true, :name cljs.pprint/add-english-scales, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 26, :method-params ([parts offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1196, :end-line 1196, :max-fixed-arity 2, :fn-var true, :arglists (quote ([parts offset])), :doc "Take a sequence of parts, add scale numbers (e.g., million) and combine into a string\n  offset is a factor of 10^3 to multiply by"}, pprint {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 811, :column 7, :end-line 811, :end-column 13, :arglists (quote ([object] [object writer])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([object] [object writer]), :arglists ([object] [object writer]), :arglists-meta (nil nil)}}, :name cljs.pprint/pprint, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([object] [object writer]), :arglists ([object] [object writer]), :arglists-meta (nil nil)}, :method-params ([object] [object writer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 811, :end-line 811, :max-fixed-arity 2, :fn-var true, :arglists ([object] [object writer])}, iterate-main-sublists {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1802, :column 8, :end-line 1802, :end-column 29, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/iterate-main-sublists, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 29, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1802, :end-line 1802, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, simple-dispatch {:name cljs.pprint/simple-dispatch, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 2898, :column 1, :end-line 2898, :end-column 26, :doc "The pretty print dispatch function for simple data structure format.", :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2898, :column 11, :end-line 2898, :end-column 26, :doc "The pretty print dispatch function for simple data structure format."}}, pr {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 43, :column 18, :end-line 43, :end-column 20, :dynamic true, :private true, :arglists (quote ([& more])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(more)], :arglists ([& more]), :arglists-meta (nil)}}, :private true, :name cljs.pprint/pr, :variadic true, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(more)], :arglists ([& more]), :arglists-meta (nil)}, :method-params [(more)], :protocol-impl nil, :arglists-meta (nil), :column 1, :dynamic true, :line 43, :end-line 43, :max-fixed-arity 0, :fn-var true, :arglists ([& more])}, needs-pretty {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2692, :column 8, :end-line 2692, :end-column 20, :private true, :arglists (quote ([format])), :doc "determine whether a given compiled format has any directives that depend on the\ncolumn number or pretty printing"}, :private true, :name cljs.pprint/needs-pretty, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 20, :method-params ([format]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2692, :end-line 2692, :max-fixed-arity 1, :fn-var true, :arglists (quote ([format])), :doc "determine whether a given compiled format has any directives that depend on the\ncolumn number or pretty printing"}, get-column {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 159, :column 8, :end-line 159, :end-column 18, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/get-column, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, pprint-let {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 3057, :column 8, :end-line 3057, :end-column 18, :private true, :arglists (quote ([alis]))}, :private true, :name cljs.pprint/pprint-let, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 18, :method-params ([alis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3057, :end-line 3057, :max-fixed-arity 1, :fn-var true, :arglists (quote ([alis]))}, english-cardinal-tens {:name cljs.pprint/english-cardinal-tens, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 1157, :column 1, :end-line 1158, :end-column 27, :private true, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1158, :column 6, :end-line 1158, :end-column 27, :private true}}, special-chars {:name cljs.pprint/special-chars, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 1342, :column 1, :end-line 1343, :end-column 19, :private true, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1343, :column 6, :end-line 1343, :end-column 19, :private true}}, justify-clauses {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1861, :column 8, :end-line 1861, :end-column 23, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/justify-clauses, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 23, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1861, :end-line 1861, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, write-line {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 423, :column 8, :end-line 423, :end-column 18, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/write-line, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 423, :end-line 423, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, get-pretty-writer {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2052, :column 7, :end-line 2052, :end-column 24, :arglists (quote ([writer])), :doc "Returns the IWriter passed in wrapped in a pretty writer proxy, unless it's\nalready a pretty writer. Generally, it is unnecessary to call this function, since pprint,\nwrite, and cl-format all call it if they need to. However if you want the state to be\npreserved across calls, you will want to wrap them with this.\n\nFor example, when you want to generate column-aware output with multiple calls to cl-format,\ndo it like in this example:\n\n    (defn print-table [aseq column-width]\n      (binding [*out* (get-pretty-writer *out*)]\n        (doseq [row aseq]\n          (doseq [col row]\n            (cl-format true \"~4D~7,vT\" col column-width))\n          (prn))))\n\nNow when you run:\n\n    user> (print-table (map #(vector % (* % %) (* % % %)) (range 1 11)) 8)\n\nIt prints a table of squares and cubes for the numbers from 1 to 10:\n\n       1      1       1\n       2      4       8\n       3      9      27\n       4     16      64\n       5     25     125\n       6     36     216\n       7     49     343\n       8     64     512\n       9     81     729\n      10    100    1000"}, :name cljs.pprint/get-pretty-writer, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 24, :method-params ([writer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2052, :end-line 2052, :max-fixed-arity 1, :fn-var true, :arglists (quote ([writer])), :doc "Returns the IWriter passed in wrapped in a pretty writer proxy, unless it's\nalready a pretty writer. Generally, it is unnecessary to call this function, since pprint,\nwrite, and cl-format all call it if they need to. However if you want the state to be\npreserved across calls, you will want to wrap them with this.\n\nFor example, when you want to generate column-aware output with multiple calls to cl-format,\ndo it like in this example:\n\n    (defn print-table [aseq column-width]\n      (binding [*out* (get-pretty-writer *out*)]\n        (doseq [row aseq]\n          (doseq [col row]\n            (cl-format true \"~4D~7,vT\" col column-width))\n          (prn))))\n\nNow when you run:\n\n    user> (print-table (map #(vector % (* % %) (* % % %)) (range 1 11)) 8)\n\nIt prints a table of squares and cubes for the numbers from 1 to 10:\n\n       1      1       1\n       2      4       8\n       3      9      27\n       4     16      64\n       5     25     125\n       6     36     216\n       7     49     343\n       8     64     512\n       9     81     729\n      10    100    1000"}, *print-suppress-namespaces* {:meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 661, :column 1, :end-line 661, :end-column 28, :doc "Don't print namespaces with symbols. This is particularly useful when\npretty printing the results of macro expansions", :added "1.2", :dynamic true}, :added "1.2", :name cljs.pprint/*print-suppress-namespaces*, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 28, :column 1, :dynamic true, :line 657, :end-line 661, :doc "Don't print namespaces with symbols. This is particularly useful when\npretty printing the results of macro expansions"}, level-exceeded {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 838, :column 8, :end-line 838, :end-column 22, :private true, :arglists (quote ([]))}, :private true, :name cljs.pprint/level-exceeded, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 838, :end-line 838, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, logical-block {:private true, :num-fields 10, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.pprint/logical-block, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 42, :type true, :column 29, :internal-ctor true, :line 230, :record true, :end-line 230, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, make-nl-t {:protocol-inline nil, :meta {:private true, :arglists (quote ([type logical-block start-pos end-pos])), :file nil}, :private true, :name cljs.pprint/make-nl-t, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([type logical-block start-pos end-pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 253, :max-fixed-arity 4, :fn-var true, :arglists (quote ([type logical-block start-pos end-pos]))}, map->nl-t {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 253, :column 10, :end-line 253, :end-column 14, :internal-ctor true, :factory :map, :arglists (quote ([G__56778]))}, :name cljs.pprint/map->nl-t, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 14, :method-params ([G__56778]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 253, :end-line 253, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__56778]))}, dollar-float {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1663, :column 8, :end-line 1663, :end-column 20, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/dollar-float, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 20, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1663, :end-line 1663, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, write-initial-lines {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 453, :column 8, :end-line 453, :end-column 27, :private true, :arglists (quote ([this s]))}, :private true, :name cljs.pprint/write-initial-lines, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 27, :method-params ([this s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 453, :end-line 453, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this s]))}, indent-t? {:protocol-inline nil, :meta {:private true, :arglists (quote ([x__52979__auto__])), :file nil}, :private true, :name cljs.pprint/indent-t?, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([x__52979__auto__]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 259, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x__52979__auto__]))}, char-code {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 62, :column 7, :end-line 62, :end-column 16, :arglists (quote ([c])), :doc "Convert char to int"}, :name cljs.pprint/char-code, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 16, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :doc "Convert char to int"}, insert-scaled-decimal {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1506, :column 8, :end-line 1506, :end-column 29, :private true, :arglists (quote ([m k])), :doc "Insert the decimal point at the right spot in the number to match an exponent"}, :private true, :name cljs.pprint/insert-scaled-decimal, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 29, :method-params ([m k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1506, :end-line 1506, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m k])), :doc "Insert the decimal point at the right spot in the number to match an exponent"}, add-padding {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 3291, :column 8, :end-line 3291, :end-column 19, :private true, :arglists (quote ([width s]))}, :private true, :name cljs.pprint/add-padding, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 19, :method-params ([width s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3291, :end-line 3291, :max-fixed-arity 2, :fn-var true, :arglists (quote ([width s]))}, arg-navigator {:private true, :num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.pprint/arg-navigator, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 16, :type true, :column 3, :internal-ctor true, :line 944, :record true, :end-line 944, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->compiled-directive {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 988, :column 3, :end-line 988, :end-column 21, :private true, :internal-ctor true, :factory :map, :arglists (quote ([G__56981]))}, :private true, :name cljs.pprint/map->compiled-directive, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :method-params ([G__56981]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 987, :end-line 988, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__56981]))}, *current-length* {:name cljs.pprint/*current-length*, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 684, :column 1, :end-line 684, :end-column 49, :private true, :dynamic true, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 684, :column 33, :end-line 684, :end-column 49, :private true, :dynamic true}}, round-str {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1439, :column 8, :end-line 1439, :end-column 17, :private true, :arglists (quote ([m e d w]))}, :private true, :name cljs.pprint/round-str, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 17, :method-params ([m e d w]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1439, :end-line 1439, :max-fixed-arity 4, :fn-var true, :arglists (quote ([m e d w]))}, *print-pretty* {:name cljs.pprint/*print-pretty*, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 615, :column 1, :end-line 617, :end-column 16, :doc "Bind to true if you want write to use pretty printing", :dynamic true, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 617, :column 2, :end-line 617, :end-column 16, :doc "Bind to true if you want write to use pretty printing", :dynamic true}}, *print-pprint-dispatch* {:meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 623, :column 2, :end-line 623, :end-column 25, :doc "The pretty print dispatch function. Use with-pprint-dispatch or\nset-pprint-dispatch to modify.", :added "1.2", :dynamic true}, :added "1.2", :name cljs.pprint/*print-pprint-dispatch*, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 25, :column 1, :dynamic true, :line 619, :end-line 623, :doc "The pretty print dispatch function. Use with-pprint-dispatch or\nset-pprint-dispatch to modify."}, write-option-table {:name cljs.pprint/write-option-table, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 692, :column 1, :end-line 692, :end-column 41, :private true, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 692, :column 23, :end-line 692, :end-column 41, :private true}}, pp-newline {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 261, :column 16, :end-line 261, :end-column 26, :private true}, :private true, :name cljs.pprint/pp-newline, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 261, :end-line 261, :max-fixed-arity 0, :fn-var true, :arglists nil}, upcase-writer {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1937, :column 8, :end-line 1937, :end-column 21, :private true, :arglists (quote ([writer])), :doc "Returns a proxy that wraps writer, converting all characters to upper case"}, :private true, :name cljs.pprint/upcase-writer, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :method-params ([writer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1937, :end-line 1937, :max-fixed-arity 1, :fn-var true, :arglists (quote ([writer])), :doc "Returns a proxy that wraps writer, converting all characters to upper case"}, start-block-t {:num-fields 4, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.pprint/start-block-t, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 23, :type true, :column 10, :internal-ctor true, :line 255, :record true, :end-line 255, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, execute-sub-format {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1379, :column 8, :end-line 1379, :end-column 26, :private true, :arglists (quote ([format args base-args]))}, :private true, :name cljs.pprint/execute-sub-format, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 26, :method-params ([format args base-args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1379, :end-line 1379, :max-fixed-arity 3, :fn-var true, :arglists (quote ([format args base-args]))}, ...}, :require-macros {m cljs.pprint, cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{:mandatory seq :logical-blocks cljs.core/unquote when-first :arg3 logical-block-callback :suffix intra-block-nl :selector cljs.core/*print-level* *print-circle* :else-params :block :allows-separator last-was-whitespace? :indent cljs.pprint/*print-pretty* cljs.pprint/*print-pprint-dispatch* *print-suppress-namespaces* logical-block :miser-width struct rest meta57395 .. *print-pretty* *print-pprint-dispatch* type-tag :buffer-block max-columns :arg2 :commainterval :pretty-writer start-pos :parent :sections :private data :else :miser :right-margin cljs.pprint/*print-base* if-not cljs.core/deref :offset *print-level* doseq meta56750 :cur ...}, :order [:else :cur :line :max :base writer max-columns fields meta56750 :parent :section :start-col :indent :done-nl :intra-block-nl :prefix :per-line-prefix :suffix :logical-block-callback parent section start-col indent done-nl intra-block-nl prefix per-line-prefix suffix logical-block-callback :end-pos :start-pos :type-tag :data :trailing-white-space type-tag data trailing-white-space start-pos end-pos :buffer-blob :type :logical-block type logical-block :nl-t :start-block-t :end-block-t :relative-to :offset relative-to ...]}, :doc nil}