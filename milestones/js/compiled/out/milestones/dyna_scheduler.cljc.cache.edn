{:rename-macros {}, :renames {}, :use-macros {gen-all-precedence-edges milestones.graph-utilities, graph-cycles milestones.graph-utilities, predecessors-of-task-exist? milestones.graph-utilities}, :excludes #{}, :name milestones.dyna-scheduler, :imports nil, :requires {milestones.graph-utilities milestones.graph-utilities}, :uses {gen-all-precedence-edges milestones.graph-utilities, graph-cycles milestones.graph-utilities, predecessors-of-task-exist? milestones.graph-utilities}, :defs {errors-on-tasks {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/dyna_scheduler.cljc", :line 370, :column 7, :end-line 370, :end-column 22, :arglists (quote ([tasks reordering-properties])), :doc "verif if there-s something wrong before we schedule.\n  emits a map. {:errors {} :results schedule\n  errors : non existing reordering prop, non existing predecessors, and cycles."}, :name milestones.dyna-scheduler/errors-on-tasks, :variadic false, :file "src/milestones/dyna_scheduler.cljc", :end-column 22, :method-params ([tasks reordering-properties]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 370, :end-line 370, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tasks reordering-properties])), :doc "verif if there-s something wrong before we schedule.\n  emits a map. {:errors {} :results schedule\n  errors : non existing reordering prop, non existing predecessors, and cycles."}, task-sched-time-vector {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/dyna_scheduler.cljc", :line 133, :column 7, :end-line 133, :end-column 29, :arglists (quote ([output-schedule task-id])), :doc "Given an output-schedule, and a task-id you get a time-vector \n  of the task as present in the output schedule"}, :name milestones.dyna-scheduler/task-sched-time-vector, :variadic false, :file "src/milestones/dyna_scheduler.cljc", :end-column 29, :method-params ([output-schedule task-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 2, :fn-var true, :arglists (quote ([output-schedule task-id])), :doc "Given an output-schedule, and a task-id you get a time-vector \n  of the task as present in the output schedule"}, missing-prop-for-task {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/dyna_scheduler.cljc", :line 311, :column 7, :end-line 311, :end-column 28, :arglists (quote ([task reordering-properties])), :doc "Given a task ({:prop ...}) and a vector of properties\n  returns missing properties for task"}, :name milestones.dyna-scheduler/missing-prop-for-task, :variadic false, :file "src/milestones/dyna_scheduler.cljc", :end-column 28, :method-params ([task reordering-properties]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 311, :end-line 311, :max-fixed-arity 2, :fn-var true, :arglists (quote ([task reordering-properties])), :doc "Given a task ({:prop ...}) and a vector of properties\n  returns missing properties for task"}, tasks-w-empty-predecessors {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/dyna_scheduler.cljc", :line 343, :column 7, :end-line 343, :end-column 33, :arglists (quote ([tasks]))}, :name milestones.dyna-scheduler/tasks-w-empty-predecessors, :variadic false, :file "src/milestones/dyna_scheduler.cljc", :end-column 33, :method-params ([tasks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 343, :end-line 343, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tasks]))}, not-found-task? {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/dyna_scheduler.cljc", :line 350, :column 7, :end-line 350, :end-column 22, :arglists (quote ([tasks task-id])), :doc "If task id is not in tasks, return true"}, :name milestones.dyna-scheduler/not-found-task?, :variadic false, :file "src/milestones/dyna_scheduler.cljc", :end-column 22, :method-params ([tasks task-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 350, :end-line 350, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tasks task-id])), :doc "If task id is not in tasks, return true"}, run-scheduler {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/dyna_scheduler.cljc", :line 282, :column 7, :end-line 282, :end-column 20, :arglists (quote ([tasks reordering-properties])), :doc "this is the master-mind. runs all of them, collects their inputs,\n  and then goes home"}, :name milestones.dyna-scheduler/run-scheduler, :variadic false, :file "src/milestones/dyna_scheduler.cljc", :end-column 20, :method-params ([tasks reordering-properties]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 282, :end-line 282, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tasks reordering-properties])), :doc "this is the master-mind. runs all of them, collects their inputs,\n  and then goes home"}, format-a-task-in-output-schedule {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/dyna_scheduler.cljc", :line 145, :column 7, :end-line 145, :end-column 39, :arglists (quote ([output-schedule a-task])), :doc "Given a task, we compute its current time vector\n  and inject begin-time and completion ratio in it"}, :name milestones.dyna-scheduler/format-a-task-in-output-schedule, :variadic false, :file "src/milestones/dyna_scheduler.cljc", :end-column 39, :method-params ([output-schedule a-task]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 2, :fn-var true, :arglists (quote ([output-schedule a-task])), :doc "Given a task, we compute its current time vector\n  and inject begin-time and completion ratio in it"}, work-flow-for-resource {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/dyna_scheduler.cljc", :line 174, :column 7, :end-line 174, :end-column 29, :arglists (quote ([current-work-flow tasks resource-id current-output-schedule reordering-properties])), :doc "given a user, its current work-queue, tasks and current output schedule,\n   we find his tasks, the fireable ones, reorder all of them (if preemptive)\n   or those non work in propress if not, and issue new work-flow"}, :name milestones.dyna-scheduler/work-flow-for-resource, :variadic false, :file "src/milestones/dyna_scheduler.cljc", :end-column 29, :method-params ([current-work-flow tasks resource-id current-output-schedule reordering-properties]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 174, :end-line 174, :max-fixed-arity 5, :fn-var true, :arglists (quote ([current-work-flow tasks resource-id current-output-schedule reordering-properties])), :doc "given a user, its current work-queue, tasks and current output schedule,\n   we find his tasks, the fireable ones, reorder all of them (if preemptive)\n   or those non work in propress if not, and issue new work-flow"}, properties {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/dyna_scheduler.cljc", :line 105, :column 7, :end-line 105, :end-column 17, :arglists (quote ([property-names])), :doc "Inspired from the joy of clojure. Knew I was going to use it someday!\n  This yields a function which, applied to each task by sort-by,\n  will generate vector of values used to order the tasks\n  don't forget we have rows with indices, {1 {:order ...}"}, :name milestones.dyna-scheduler/properties, :variadic false, :file "src/milestones/dyna_scheduler.cljc", :end-column 17, :method-params ([property-names]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([property-names])), :doc "Inspired from the joy of clojure. Knew I was going to use it someday!\n  This yields a function which, applied to each task by sort-by,\n  will generate vector of values used to order the tasks\n  don't forget we have rows with indices, {1 {:order ...}"}, task-complete? {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/dyna_scheduler.cljc", :line 46, :column 7, :end-line 46, :end-column 21, :arglists (quote ([tasks output-schedule the-task-id])), :doc "Returns true if task is complete"}, :name milestones.dyna-scheduler/task-complete?, :variadic false, :file "src/milestones/dyna_scheduler.cljc", :end-column 21, :method-params ([tasks output-schedule the-task-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 3, :fn-var true, :arglists (quote ([tasks output-schedule the-task-id])), :doc "Returns true if task is complete"}, prepare-milestone {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/dyna_scheduler.cljc", :line 393, :column 7, :end-line 393, :end-column 24, :arglists (quote ([a-milestone-desc])), :doc "A milestone is declared by giving :milestone-name and at least one predecessor\n  then we create a task, with a (gensym :milestone-user) and a duration 1 as user-id, so milestones\n  can enter the scheduler algorithm"}, :name milestones.dyna-scheduler/prepare-milestone, :variadic false, :file "src/milestones/dyna_scheduler.cljc", :end-column 24, :method-params ([a-milestone-desc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 393, :end-line 393, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a-milestone-desc])), :doc "A milestone is declared by giving :milestone-name and at least one predecessor\n  then we create a task, with a (gensym :milestone-user) and a duration 1 as user-id, so milestones\n  can enter the scheduler algorithm"}, schedule {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/dyna_scheduler.cljc", :line 410, :column 7, :end-line 410, :end-column 15, :arglists (quote ([tasks reordering-properties])), :doc "The real over-master-uber-function to call. Gives you tasks with :begin,\n  just like you'd exepct, if errors =nil, or you can read errors instead."}, :name milestones.dyna-scheduler/schedule, :variadic false, :file "src/milestones/dyna_scheduler.cljc", :end-column 15, :method-params ([tasks reordering-properties]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 410, :end-line 410, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tasks reordering-properties])), :doc "The real over-master-uber-function to call. Gives you tasks with :begin,\n  just like you'd exepct, if errors =nil, or you can read errors instead."}, tasks-w-no-field {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/dyna_scheduler.cljc", :line 338, :column 7, :end-line 338, :end-column 23, :arglists (quote ([tasks field])), :doc "Which tasks don't have Field field."}, :name milestones.dyna-scheduler/tasks-w-no-field, :variadic false, :file "src/milestones/dyna_scheduler.cljc", :end-column 23, :method-params ([tasks field]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 338, :end-line 338, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tasks field])), :doc "Which tasks don't have Field field."}, move-system-status-gen {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/dyna_scheduler.cljc", :line 252, :column 7, :end-line 252, :end-column 29, :arglists (quote ([tasks reordering-properties timer resources-ids output-schedule workflows]))}, :name milestones.dyna-scheduler/move-system-status-gen, :variadic false, :file "src/milestones/dyna_scheduler.cljc", :end-column 29, :method-params ([tasks reordering-properties timer resources-ids output-schedule workflows]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 252, :end-line 252, :max-fixed-arity 6, :fn-var true, :arglists (quote ([tasks reordering-properties timer resources-ids output-schedule workflows]))}, tasks-w-missing-properties {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/dyna_scheduler.cljc", :line 320, :column 7, :end-line 320, :end-column 33, :arglists (quote ([tasks reordering-properties])), :doc "Returns a map, with task-id and a vector of missing property"}, :name milestones.dyna-scheduler/tasks-w-missing-properties, :variadic false, :file "src/milestones/dyna_scheduler.cljc", :end-column 33, :method-params ([tasks reordering-properties]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 320, :end-line 320, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tasks reordering-properties])), :doc "Returns a map, with task-id and a vector of missing property"}, prepare-tasks {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/dyna_scheduler.cljc", :line 401, :column 7, :end-line 401, :end-column 20, :arglists (quote ([tasks])), :doc "Adds random user-ids and duration=1 to milestones tasks"}, :name milestones.dyna-scheduler/prepare-tasks, :variadic false, :file "src/milestones/dyna_scheduler.cljc", :end-column 20, :method-params ([tasks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 401, :end-line 401, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tasks])), :doc "Adds random user-ids and duration=1 to milestones tasks"}, work-in-progress-count {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/dyna_scheduler.cljc", :line 64, :column 7, :end-line 64, :end-column 29, :arglists (quote ([work-flow the-task-id])), :doc "Work in progress is a task at the peek of the work flow [ 1 1 2 2 2 ...],\n  that a resource begun treating. Once a task is Work in progress,\n  it is not involved in the reordering of tasks, unless its length \n  is equal to the original task duration : it has not yet been processed."}, :name milestones.dyna-scheduler/work-in-progress-count, :variadic false, :file "src/milestones/dyna_scheduler.cljc", :end-column 29, :method-params ([work-flow the-task-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 2, :fn-var true, :arglists (quote ([work-flow the-task-id])), :doc "Work in progress is a task at the peek of the work flow [ 1 1 2 2 2 ...],\n  that a resource begun treating. Once a task is Work in progress,\n  it is not involved in the reordering of tasks, unless its length \n  is equal to the original task duration : it has not yet been processed."}, tasks-w-non-existent-predecessors {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/dyna_scheduler.cljc", :line 358, :column 7, :end-line 358, :end-column 40, :arglists (quote ([tasks])), :doc "Given Tasks, emits a detailed info on whom tasks are having non existent \n  predecessors"}, :name milestones.dyna-scheduler/tasks-w-non-existent-predecessors, :variadic false, :file "src/milestones/dyna_scheduler.cljc", :end-column 40, :method-params ([tasks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 358, :end-line 358, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tasks])), :doc "Given Tasks, emits a detailed info on whom tasks are having non existent \n  predecessors"}, gen-work-flow {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/dyna_scheduler.cljc", :line 10, :column 7, :end-line 10, :end-column 20, :arglists (quote ([tasks work-queue])), :doc "Given all tasks description vector [{:task-id, ...},{}]\n  and a work-queue [1 2 3],... we generate named task units\n  with as many unit of each task as its duration :\n  [1 1 1 2 2 3 3 3]"}, :name milestones.dyna-scheduler/gen-work-flow, :variadic false, :file "src/milestones/dyna_scheduler.cljc", :end-column 20, :method-params ([tasks work-queue]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tasks work-queue])), :doc "Given all tasks description vector [{:task-id, ...},{}]\n  and a work-queue [1 2 3],... we generate named task units\n  with as many unit of each task as its duration :\n  [1 1 1 2 2 3 3 3]"}, reorder-tasks {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/dyna_scheduler.cljc", :line 117, :column 7, :end-line 117, :end-column 20, :arglists (quote ([tasks property-names])), :doc "Sort tasks according to properties given in the property-names\n  vector. As it is a vector, accessing from right is more effcient. as more\n  urgent comes first, i.e on left of the vector, we need to reverse\n  the result to put highest priority to the right."}, :name milestones.dyna-scheduler/reorder-tasks, :variadic false, :file "src/milestones/dyna_scheduler.cljc", :end-column 20, :method-params ([tasks property-names]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tasks property-names])), :doc "Sort tasks according to properties given in the property-names\n  vector. As it is a vector, accessing from right is more effcient. as more\n  urgent comes first, i.e on left of the vector, we need to reverse\n  the result to put highest priority to the right."}, tasks-w-not-found-predecessors {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/dyna_scheduler.cljc", :line 330, :column 7, :end-line 330, :end-column 37, :arglists (quote ([tasks])), :doc "Returns the Tasks with predecessors not declared as tasks elsewhere in the tasks definition."}, :name milestones.dyna-scheduler/tasks-w-not-found-predecessors, :variadic false, :file "src/milestones/dyna_scheduler.cljc", :end-column 37, :method-params ([tasks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 330, :end-line 330, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tasks])), :doc "Returns the Tasks with predecessors not declared as tasks elsewhere in the tasks definition."}, task-in-work-in-progress? {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/dyna_scheduler.cljc", :line 74, :column 7, :end-line 74, :end-column 32, :arglists (quote ([tasks work-flow the-task-id])), :doc "Returns true if task is work-in-progress,\n  i.e, is in the head of the work queue, and is not at full length"}, :name milestones.dyna-scheduler/task-in-work-in-progress?, :variadic false, :file "src/milestones/dyna_scheduler.cljc", :end-column 32, :method-params ([tasks work-flow the-task-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 3, :fn-var true, :arglists (quote ([tasks work-flow the-task-id])), :doc "Returns true if task is work-in-progress,\n  i.e, is in the head of the work queue, and is not at full length"}, total-task-duration {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/dyna_scheduler.cljc", :line 242, :column 7, :end-line 242, :end-column 26, :arglists (quote ([tasks])), :doc "Computes total tasks duration as if they were done sequentially."}, :name milestones.dyna-scheduler/total-task-duration, :variadic false, :file "src/milestones/dyna_scheduler.cljc", :end-column 26, :method-params ([tasks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 242, :end-line 242, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tasks])), :doc "Computes total tasks duration as if they were done sequentially."}, all-predecessors-complete? {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/dyna_scheduler.cljc", :line 85, :column 7, :end-line 85, :end-column 33, :arglists (quote ([tasks output-schedule task-id])), :doc "A predicate that returns true if all predecessors have been completed "}, :name milestones.dyna-scheduler/all-predecessors-complete?, :variadic false, :file "src/milestones/dyna_scheduler.cljc", :end-column 33, :method-params ([tasks output-schedule task-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 3, :fn-var true, :arglists (quote ([tasks output-schedule task-id])), :doc "A predicate that returns true if all predecessors have been completed "}, run-scheduler-for-resource {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/dyna_scheduler.cljc", :line 216, :column 7, :end-line 216, :end-column 33, :arglists (quote ([timer resource-id tasks output-schedule workflows reordering-properties])), :doc "For this timer, computes aht task unit this resource will compute,\n  yielding a new workflows map"}, :name milestones.dyna-scheduler/run-scheduler-for-resource, :variadic false, :file "src/milestones/dyna_scheduler.cljc", :end-column 33, :method-params ([timer resource-id tasks output-schedule workflows reordering-properties]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 216, :end-line 216, :max-fixed-arity 6, :fn-var true, :arglists (quote ([timer resource-id tasks output-schedule workflows reordering-properties])), :doc "For this timer, computes aht task unit this resource will compute,\n  yielding a new workflows map"}, all-tasks-complete? {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/dyna_scheduler.cljc", :line 56, :column 7, :end-line 56, :end-column 26, :arglists (quote ([tasks output-schedule]))}, :name milestones.dyna-scheduler/all-tasks-complete?, :variadic false, :file "src/milestones/dyna_scheduler.cljc", :end-column 26, :method-params ([tasks output-schedule]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tasks output-schedule]))}, find-fireable-tasks {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/dyna_scheduler.cljc", :line 97, :column 7, :end-line 97, :end-column 26, :arglists (quote ([tasks output-schedule])), :doc "Finds which tasks can be fired based on their predecessors."}, :name milestones.dyna-scheduler/find-fireable-tasks, :variadic false, :file "src/milestones/dyna_scheduler.cljc", :end-column 26, :method-params ([tasks output-schedule]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tasks output-schedule])), :doc "Finds which tasks can be fired based on their predecessors."}, tasks-for-resource {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/dyna_scheduler.cljc", :line 128, :column 7, :end-line 128, :end-column 25, :arglists (quote ([tasks resource-id])), :doc "Given a user-id, give you all tasks for this user (with all infos)"}, :name milestones.dyna-scheduler/tasks-for-resource, :variadic false, :file "src/milestones/dyna_scheduler.cljc", :end-column 25, :method-params ([tasks resource-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tasks resource-id])), :doc "Given a user-id, give you all tasks for this user (with all infos)"}, format-tasks-in-output-schedule {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/dyna_scheduler.cljc", :line 158, :column 7, :end-line 158, :end-column 38, :arglists (quote ([output-schedule tasks])), :doc "Given an output schedule :\n  [{:task-id 1 :time 1 :resource-id 1}\n  {:task-id 3 :time 1 :resource-id 1}\n  {:task-id 1 :time 2 :resource-id 1}\n  {:task-id 3 :time 2 :resource-id 1}\n  {:task-id 3 :time 3 :resource-id 1}]\n  we find start-time, completion rate for each task and then we return\n  a scheduled version of tasks. {1 {:begin 2 :completion-rate 2/5....})"}, :name milestones.dyna-scheduler/format-tasks-in-output-schedule, :variadic false, :file "src/milestones/dyna_scheduler.cljc", :end-column 38, :method-params ([output-schedule tasks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 2, :fn-var true, :arglists (quote ([output-schedule tasks])), :doc "Given an output schedule :\n  [{:task-id 1 :time 1 :resource-id 1}\n  {:task-id 3 :time 1 :resource-id 1}\n  {:task-id 1 :time 2 :resource-id 1}\n  {:task-id 3 :time 2 :resource-id 1}\n  {:task-id 3 :time 3 :resource-id 1}]\n  we find start-time, completion rate for each task and then we return\n  a scheduled version of tasks. {1 {:begin 2 :completion-rate 2/5....})"}, task-completion-rate {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/dyna_scheduler.cljc", :line 23, :column 7, :end-line 23, :end-column 27, :arglists (quote ([tasks output-schedule the-task-id])), :doc "Given tasks description, a schedule-output\n  [{:task-id 1 :resource-id 1 :time 2}\n  {:task-id 1 :resource-id 1 :time 2} ...]\n  and a task-id, returns the completion-rate,i.e,\n  nb of units in output / duration of task. if no task in the schedule,\n  it's completion is 0. If no duration / 0, completion is 1. "}, :name milestones.dyna-scheduler/task-completion-rate, :variadic false, :file "src/milestones/dyna_scheduler.cljc", :end-column 27, :method-params ([tasks output-schedule the-task-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 3, :fn-var true, :arglists (quote ([tasks output-schedule the-task-id])), :doc "Given tasks description, a schedule-output\n  [{:task-id 1 :resource-id 1 :time 2}\n  {:task-id 1 :resource-id 1 :time 2} ...]\n  and a task-id, returns the completion-rate,i.e,\n  nb of units in output / duration of task. if no task in the schedule,\n  it's completion is 0. If no duration / 0, completion is 1. "}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:errors :task-id :new-output-schedule :else :task-unit :time :resource-id :achieved :reordering-errors :duration :predecessors :begin :tasks-w-no-resources :result :new-workflows :tasks-w-predecessors-errors :unable-to-schedule :milestones-w-no-predecessors :milestone-user :tasks-cycles :is-milestone}, :order [:duration :else :task-id :predecessors :resource-id :time :begin :achieved :task-unit :new-workflows :new-output-schedule :is-milestone :reordering-errors :tasks-w-predecessors-errors :tasks-w-no-resources :tasks-cycles :milestones-w-no-predecessors :milestone-user :errors :result :unable-to-schedule]}, :doc nil}