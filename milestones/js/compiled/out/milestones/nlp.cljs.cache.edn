{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name milestones.nlp, :imports nil, :requires {milestones.parser-rules milestones.parser-rules}, :uses {item-significant-value? milestones.parser-rules, rules milestones.parser-rules}, :defs {lexicon {:name milestones.nlp/lexicon, :file "/Users/turbopape/work/milestones/src/milestones/nlp.cljs", :line 6, :column 1, :end-line 6, :end-column 13, :meta {:file "/Users/turbopape/work/milestones/src/milestones/nlp.cljs", :line 6, :column 6, :end-line 6, :end-column 13}}, nlp {:name milestones.nlp/nlp, :file "/Users/turbopape/work/milestones/src/milestones/nlp.cljs", :line 4, :column 1, :end-line 4, :end-column 9, :meta {:file "/Users/turbopape/work/milestones/src/milestones/nlp.cljs", :line 4, :column 6, :end-line 4, :end-column 9}}, parse-tags {:name milestones.nlp/parse-tags, :file "/Users/turbopape/work/milestones/src/milestones/nlp.cljs", :line 169, :column 1, :end-line 169, :end-column 16, :meta {:file "/Users/turbopape/work/milestones/src/milestones/nlp.cljs", :line 169, :column 6, :end-line 169, :end-column 16}}, parse-task-w-a-tag-stack {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/nlp.cljs", :line 93, :column 7, :end-line 93, :end-column 31, :arglists (quote ([task-str init-tag-stack optional-steps]))}, :name milestones.nlp/parse-task-w-a-tag-stack, :variadic false, :file "/Users/turbopape/work/milestones/src/milestones/nlp.cljs", :end-column 31, :method-params ([task-str init-tag-stack optional-steps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 3, :fn-var true, :arglists (quote ([task-str init-tag-stack optional-steps]))}, pos-tags-lexicon {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/nlp.cljs", :line 22, :column 7, :end-line 22, :end-column 23, :arglists (quote ([lexicon sentence]))}, :name milestones.nlp/pos-tags-lexicon, :variadic false, :file "/Users/turbopape/work/milestones/src/milestones/nlp.cljs", :end-column 23, :method-params ([lexicon sentence]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([lexicon sentence]))}, fast-forward {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/nlp.cljs", :line 84, :column 7, :end-line 84, :end-column 19, :arglists (quote ([tag-stack])), :doc "Goes FFW in a tag-stack until it finds a step specification. "}, :name milestones.nlp/fast-forward, :variadic false, :file "/Users/turbopape/work/milestones/src/milestones/nlp.cljs", :end-column 19, :method-params ([tag-stack]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tag-stack])), :doc "Goes FFW in a tag-stack until it finds a step specification. "}, curate-task {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/nlp.cljs", :line 172, :column 7, :end-line 172, :end-column 18, :arglists (quote ([a-task])), :doc "Curates generated tasks : 1,2,3... => [1 2 3]\n  [d] -> d, [5] -> 5"}, :name milestones.nlp/curate-task, :variadic false, :file "/Users/turbopape/work/milestones/src/milestones/nlp.cljs", :end-column 18, :method-params ([a-task]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 172, :end-line 172, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a-task])), :doc "Curates generated tasks : 1,2,3... => [1 2 3]\n  [d] -> d, [5] -> 5"}, accept-tag {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/nlp.cljs", :line 46, :column 7, :end-line 46, :end-column 17, :arglists (quote ([input-item tag-stack])), :doc "Verifies if an input like: [\"task\" {:Noun true}] correponds to\n  one of the keys stored in the head of tag-stack, which would be an\n  element like #{ :multi #{:Noun Value...}}, or if it is a checkpoint,\n  to notify the caller to construct a part of the task. the :star in a\n  head of stack means that this token can be met multiple times,\n  causing the stack to keep it when ever we find an item corresponding\n  to it, or consuming it an moving forward if the element correspond\n  to the next status."}, :name milestones.nlp/accept-tag, :variadic false, :file "/Users/turbopape/work/milestones/src/milestones/nlp.cljs", :end-column 17, :method-params ([input-item tag-stack]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists (quote ([input-item tag-stack])), :doc "Verifies if an input like: [\"task\" {:Noun true}] correponds to\n  one of the keys stored in the head of tag-stack, which would be an\n  element like #{ :multi #{:Noun Value...}}, or if it is a checkpoint,\n  to notify the caller to construct a part of the task. the :star in a\n  head of stack means that this token can be met multiple times,\n  causing the stack to keep it when ever we find an item corresponding\n  to it, or consuming it an moving forward if the element correspond\n  to the next status."}, matches? {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/nlp.cljs", :line 39, :column 7, :end-line 39, :end-column 15, :arglists (quote ([input-item current-tag-alternatives]))}, :name milestones.nlp/matches?, :variadic false, :file "/Users/turbopape/work/milestones/src/milestones/nlp.cljs", :end-column 15, :method-params ([input-item current-tag-alternatives]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 2, :fn-var true, :arglists (quote ([input-item current-tag-alternatives]))}, pos-tags {:name milestones.nlp/pos-tags, :file "/Users/turbopape/work/milestones/src/milestones/nlp.cljs", :line 32, :column 1, :end-line 32, :end-column 14, :meta {:file "/Users/turbopape/work/milestones/src/milestones/nlp.cljs", :line 32, :column 6, :end-line 32, :end-column 14}}, parse-tags-rules {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/nlp.cljs", :line 150, :column 7, :end-line 150, :end-column 23, :arglists (quote ([rules sentence optional-steps])), :doc "Tries to parse the sentence according to rules (tag stacks). If it finds a\n  match, will return it. else, it'll return the errors it found"}, :name milestones.nlp/parse-tags-rules, :variadic false, :file "/Users/turbopape/work/milestones/src/milestones/nlp.cljs", :end-column 23, :method-params ([rules sentence optional-steps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rules sentence optional-steps])), :doc "Tries to parse the sentence according to rules (tag stacks). If it finds a\n  match, will return it. else, it'll return the errors it found"}, plural {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/nlp.cljs", :line 17, :column 7, :end-line 17, :end-column 13, :arglists (quote ([txt]))}, :name milestones.nlp/plural, :variadic false, :file "/Users/turbopape/work/milestones/src/milestones/nlp.cljs", :end-column 13, :method-params ([txt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([txt]))}, guess-tasks {:protocol-inline nil, :meta {:file "/Users/turbopape/work/milestones/src/milestones/nlp.cljs", :line 202, :column 7, :end-line 202, :end-column 18, :arglists (quote ([a-task-desc optional-steps]))}, :name milestones.nlp/guess-tasks, :variadic false, :file "/Users/turbopape/work/milestones/src/milestones/nlp.cljs", :end-column 18, :method-params ([a-task-desc optional-steps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 202, :end-line 202, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a-task-desc optional-steps]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:errors :task-id :duration-unit :tag-stask :default :item :resource-id :milestone-id :duration :predecessors :output :task-name :priority :result :multi :expected :unable-to-parse :error :input :new-stack :items :keywordize-keys :step :taskname :is-milestone}, :order [:keywordize-keys :step :new-stack :multi :default :items :error :expected :item :output :result :input :tag-stask :errors :task-id :task-name :resource-id :duration :predecessors :priority :milestone-id :taskname :duration-unit :is-milestone :unable-to-parse]}, :doc nil}