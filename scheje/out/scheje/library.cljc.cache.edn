;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name scheje.library, :imports nil, :requires nil, :uses nil, :defs {scheje-version {:name scheje.library/scheje-version, :file "out/scheje/library.cljc", :line 3, :column 1, :end-line 3, :end-column 20, :meta {:file "/Users/rafik/work/turbopape.github.io/scheje/out/scheje/library.cljc", :line 3, :column 6, :end-line 3, :end-column 20}}, root-env {:name scheje.library/root-env, :file "out/scheje/library.cljc", :line 5, :column 1, :end-line 6, :end-column 11, :meta {:file "/Users/rafik/work/turbopape.github.io/scheje/out/scheje/library.cljc", :line 6, :column 3, :end-line 6, :end-column 11}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{cdaddr x body let-name cddaar = vector? < i atom? bnext :literals cons cadadr y datum cadar letrec* :name <= * cdaar caar let v alist cddadr cadddr cadr unquote-splicing cdar car cdadr vector-ref key cddddr null? cdaadr else > lambda cddr if :rules :keywords bindings unquote - or caaaar caddar cdadar cdddar zero? alist-cons let* caaddr cdddr not :syntax cddar letrec cadaar / vector k >= caadr l => caaadr cond binding cdr caadar caaar cdaaar caddr quasiquote list + var quote expr eq? ... assoc length and number? symbol? pair? display}, :order [cadr cadddr caaaar cadar cdar vector-ref caaadr caddar vector? caaddr cdaaar cddar cdddr cdaadr symbol? :keywords cdaar cadadr else cdaddr zero? cadaar :syntax alist-cons cddadr vector cdadr caddr assoc caadar list cddr cddaar caaar cdddar number? caar cddddr caadr cdadar lambda x car cdr v i => not pair? length quote unquote unquote-splicing quasiquote = cond if display cons null? atom? + - eq? < <= > >= / * :name :literals :rules let body ... var expr let-name letrec bindings let* binding bnext letrec* and y or key datum alist k l]}, :doc nil}