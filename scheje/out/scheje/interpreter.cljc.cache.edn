;; Analyzed by ClojureScript 1.7.170
{:use-macros {match cljs.core.match}, :excludes #{}, :name scheje.interpreter, :imports nil, :requires {cljs.core.match cljs.core.match, tools scheje.tools, scheje.tools scheje.tools, unifier scheje.unifier, scheje.unifier scheje.unifier, expander scheje.expander, scheje.expander scheje.expander, scheje.library scheje.library}, :uses {root-env scheje.library}, :defs {form-eval {:protocol-inline nil, :meta {:file "/Users/rafik/work/turbopape.github.io/scheje/out/scheje/interpreter.cljc", :line 127, :column 7, :end-line 127, :end-column 16, :arglists (quote ([exp a]))}, :name scheje.interpreter/form-eval, :variadic false, :file "out/scheje/interpreter.cljc", :end-column 16, :method-params ([exp a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 2, :fn-var true, :arglists (quote ([exp a]))}, form-apply {:protocol-inline nil, :meta {:file "/Users/rafik/work/turbopape.github.io/scheje/out/scheje/interpreter.cljc", :line 13, :column 7, :end-line 13, :end-column 17, :arglists (quote ([exp a]))}, :name scheje.interpreter/form-apply, :variadic false, :file "out/scheje/interpreter.cljc", :end-column 17, :method-params ([exp a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([exp a]))}, eval-exp-with-env {:protocol-inline nil, :meta {:file "/Users/rafik/work/turbopape.github.io/scheje/out/scheje/interpreter.cljc", :line 191, :column 7, :end-line 191, :end-column 24, :arglists (quote ([env exp]))}, :name scheje.interpreter/eval-exp-with-env, :variadic false, :file "out/scheje/interpreter.cljc", :end-column 24, :method-params ([env exp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env exp]))}, form-eval-quasi {:protocol-inline nil, :meta {:file "/Users/rafik/work/turbopape.github.io/scheje/out/scheje/interpreter.cljc", :line 107, :column 7, :end-line 107, :end-column 22, :arglists (quote ([exp a]))}, :name scheje.interpreter/form-eval-quasi, :variadic false, :file "out/scheje/interpreter.cljc", :end-column 22, :method-params ([exp a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 2, :fn-var true, :arglists (quote ([exp a]))}, evcon {:protocol-inline nil, :meta {:file "/Users/rafik/work/turbopape.github.io/scheje/out/scheje/interpreter.cljc", :line 70, :column 7, :end-line 70, :end-column 12, :arglists (quote ([conds a]))}, :name scheje.interpreter/evcon, :variadic false, :file "out/scheje/interpreter.cljc", :end-column 12, :method-params ([conds a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 2, :fn-var true, :arglists (quote ([conds a]))}, sym-set! {:protocol-inline nil, :meta {:file "/Users/rafik/work/turbopape.github.io/scheje/out/scheje/interpreter.cljc", :line 97, :column 7, :end-line 97, :end-column 15, :arglists (quote ([a sym binding]))}, :name scheje.interpreter/sym-set!, :variadic false, :file "out/scheje/interpreter.cljc", :end-column 15, :method-params ([a sym binding]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a sym binding]))}, define {:protocol-inline nil, :meta {:file "/Users/rafik/work/turbopape.github.io/scheje/out/scheje/interpreter.cljc", :line 90, :column 7, :end-line 90, :end-column 13, :arglists (quote ([a sym binding]))}, :name scheje.interpreter/define, :variadic false, :file "out/scheje/interpreter.cljc", :end-column 13, :method-params ([a sym binding]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a sym binding]))}, eval-prog {:name scheje.interpreter/eval-prog, :file "out/scheje/interpreter.cljc", :line 243, :column 1, :end-line 243, :end-column 15, :meta {:file "/Users/rafik/work/turbopape.github.io/scheje/out/scheje/interpreter.cljc", :line 243, :column 6, :end-line 243, :end-column 15}}, ts {:name scheje.interpreter/ts, :file "out/scheje/interpreter.cljc", :line 9, :column 1, :end-line 9, :end-column 8, :meta {:file "/Users/rafik/work/turbopape.github.io/scheje/out/scheje/interpreter.cljc", :line 9, :column 6, :end-line 9, :end-column 8}}, evlis {:protocol-inline nil, :meta {:file "/Users/rafik/work/turbopape.github.io/scheje/out/scheje/interpreter.cljc", :line 78, :column 7, :end-line 78, :end-column 12, :arglists (quote ([exps a]))}, :name scheje.interpreter/evlis, :variadic false, :file "out/scheje/interpreter.cljc", :end-column 12, :method-params ([exps a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 2, :fn-var true, :arglists (quote ([exps a]))}, define-syntax {:protocol-inline nil, :meta {:file "/Users/rafik/work/turbopape.github.io/scheje/out/scheje/interpreter.cljc", :line 82, :column 7, :end-line 82, :end-column 20, :arglists (quote ([a syn-name literals pattern-rules]))}, :name scheje.interpreter/define-syntax, :variadic false, :file "out/scheje/interpreter.cljc", :end-column 20, :method-params ([a syn-name literals pattern-rules]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 4, :fn-var true, :arglists (quote ([a syn-name literals pattern-rules]))}, eval-prog-with-env {:protocol-inline nil, :meta {:file "/Users/rafik/work/turbopape.github.io/scheje/out/scheje/interpreter.cljc", :line 227, :column 7, :end-line 227, :end-column 25, :arglists (quote ([a exprs]))}, :name scheje.interpreter/eval-prog-with-env, :variadic false, :file "out/scheje/interpreter.cljc", :end-column 25, :method-params ([a exprs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 227, :end-line 227, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a exprs]))}}, :require-macros {cljs.core.match cljs.core.match}, :cljs.analyzer/constants {:seen #{:scopes x = vector? < atom? a :else :literals cons y :name <= * _slash_ let unquote-splicing car vector-ref null? :evals > :env lambda if :rules :sym unquote - zero? not :syntax / vector >= define => cond :error cdr set! quasiquote . + quote eq? define-syntax length b number? symbol? pair? display}, :order [:else lambda . :sym length eq? pair? = null? zero? car cdr cons atom? not symbol? number? vector? vector vector-ref display + - _slash_ / * < > <= >= => :syntax :name :literals :rules unquote unquote-splicing :scopes :error quasiquote quote cond if define-syntax set! define :evals :env let b x a y]}, :doc nil}